name: Python CI/CD

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  quality:
    name: Code Quality
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 isort mypy
          pip install -e ".[dev]"
          
      - name: Check formatting with Black
        run: black . --check --diff
        
      - name: Check imports with isort
        run: isort . --check --diff
        
      - name: Lint with flake8
        run: |
          flake8 . --count --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          
      - name: Type check with mypy
        run: mypy copilot_api

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations that might be problematic
          - os: windows-latest
            python-version: '3.7'
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          allow-prereleases: true
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
          pip install -e ".[test]"
          
      - name: Run tests
        run: |
          pytest --cov=copilot_api --cov-report=xml --cov-report=term-missing tests/
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          flags: ${{ matrix.os }},python-${{ matrix.python-version }}

  compatibility:
    name: Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Check Python compatibility
        run: |
          pip install vermin
          vermin --no-tips --violations --target=3.7 copilot_api/

  release:
    name: Create Release
    needs: [quality, test, compatibility]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: python -m build
        
      - name: Check package
        run: |
          twine check dist/*
          pip install check-wheel-contents
          check-wheel-contents dist/*.whl
        
      - name: Test Package Installation
        run: |
          python -m venv test_env
          source test_env/bin/activate
          pip install dist/*.whl
          python -c "import copilot_api; print(copilot_api.__version__)"
          deactivate
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "Generating release notes..."
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0)
          # Get the previous tag
          previous_tag=$(git describe --tags --abbrev=0 HEAD^)
          # Generate changelog
          echo "## What's Changed" > release_notes.md
          git log --pretty=format:"* %s" $previous_tag..$latest_tag >> release_notes.md
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: release_notes.md
          draft: false
          prerelease: false
          
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
